{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"SocraCLV Group project within the scope of the course DS223 \u2013 Marketing Analytics The project aims to develop a Python package for predicting a customer's Lifetime Value (CLV) for an Internet package provider that can be applied to similar-scope companies in general. As the name suggests, the package is not just about analytics but involves a philosophically flavoured approach to understanding and predicting Customer Lifetime Value to gain meaningful insights about the long-term relationships between the company and customers. SetUp To get started, run python -m clv.db.schema to create the schema python basic_clv.py to load the data in the root of the repo python calculate_clv.py To calculate CLV and put into dataset OR python -m clv.db.schema && python basic_clv.py && python calculate_clv.py and python -m clv.api.fast to run the api To check the db follow the link https://inloop.github.io/sqlite-viewer/","title":"Home"},{"location":"#socraclv","text":"","title":"SocraCLV"},{"location":"#group-project-within-the-scope-of-the-course-ds223-marketing-analytics","text":"The project aims to develop a Python package for predicting a customer's Lifetime Value (CLV) for an Internet package provider that can be applied to similar-scope companies in general. As the name suggests, the package is not just about analytics but involves a philosophically flavoured approach to understanding and predicting Customer Lifetime Value to gain meaningful insights about the long-term relationships between the company and customers.","title":"Group project within the scope of the course DS223 \u2013 Marketing Analytics"},{"location":"#setup","text":"To get started, run python -m clv.db.schema to create the schema python basic_clv.py to load the data in the root of the repo python calculate_clv.py To calculate CLV and put into dataset OR python -m clv.db.schema && python basic_clv.py && python calculate_clv.py and python -m clv.api.fast to run the api To check the db follow the link https://inloop.github.io/sqlite-viewer/","title":"SetUp"},{"location":"API/","text":"FastAPI Routes Documentation Overview This documentation covers the FastAPI routes used for handling various entities in the internet service provider's database. These entities include transactions, payment methods, customers, and CLV predictions. Transactions Get a Transaction Route : /transaction/{transaction_id} Method : GET Description : Retrieve a transaction by its ID. Create a Transaction Route : /transaction/ Method : POST Description : Create a new transaction. Update a Transaction Route : /transaction/{transaction_id} Method : PUT Description : Update an existing transaction. Delete a Transaction Route : /transaction/{transaction_id} Method : DELETE Description : Delete a transaction. Payment Methods Get a Payment Method Route : /payment_method/{payment_method_id} Method : GET Description : Retrieve a payment method by its ID. Create a Payment Method Route : /payment_method/ Method : POST Description : Create a new payment method. Update a Payment Method Route : /payment_method/{payment_method_id} Method : PUT Description : Update an existing payment method. Delete a Payment Method Route : /payment_method/{payment_method_id} Method : DELETE Description : Delete a payment method. Customers Get a Customer Route : /customer/{customer_id} Method : GET Description : Retrieve a customer by their ID. Create a Customer Route : /customer/ Method : POST Description : Create a new customer. Update a Customer Route : /customer/{customer_id} Method : PUT Description : Update an existing customer. Delete a Customer Route : /customer/{customer_id} Method : DELETE Description : Delete a customer. CLV Predictions Get a CLV Prediction Route : /clv/{prediction_id} Method : GET Description : Retrieve a CLV prediction by its ID. Create a CLV Prediction Route : /clv/ Method : POST Description : Create a new CLV prediction. Update a CLV Prediction Route : /clv/{prediction_id} Method : PUT Description : Update an existing CLV prediction. Delete a CLV Prediction Route : /clv/{prediction_id} Method : DELETE Description : Delete a CLV prediction. read(db: Session, model, condition) Reads an object from the database using a condition. Parameters: db (Session): The database session. model : The model class to query. condition : The condition to filter by. Returns: The first object that matches the condition or None if not found. Additional Functions create(db: Session, model, obj_data: dict) Creates a new object in the database. Parameters: db (Session): The database session. model : The model class to create. obj_data (dict): The data to create the new object with. Returns: The newly created object. update(db: Session, model, condition, obj_data: dict) Updates an object in the database that matches a condition. Parameters: db (Session): The database session. model : The model class to update. condition : The condition to filter by. obj_data (dict): The data to update the object with. Returns: The updated object or None if not found. delete(db: Session, model, condition) Deletes an object from the database that matches a condition. Parameters: db (Session): The database session. model : The model class to delete from. condition : The condition to filter by. Returns: True if the object was deleted, False otherwise. Example HTTP Requests GET example of clv prediction table curl -X 'GET' \\ 'http://127.0.0.1:8000/clv/2' \\ -H 'accept: application/json' \\ -H 'Content-Type: application/json' POST example of clv prediction table curl -X 'POST' \\ 'http://127.0.0.1:8000/clv/' \\ -H 'accept: application/json' \\ -H 'Content-Type: application/json' \\ -d '{ \"prediction_id\": 9999, \"customer_id\": 1, \"clv\" :200, \"predicted_customer_type\": \"Lost Cause\", \"is_campaign1_success\": true, \"is_campaign2_success\": true } ' PUT example of clv prediction table curl -X 'PUT' \\ 'http://127.0.0.1:8000/clv/10' \\ -H 'accept: application/json' \\ -H 'Content-Type: application/json' \\ -d '{ \"clv\" :200, \"predicted_customer_type\": \"Vulnerable Customer\", \"is_campaign1_success\": true, \"is_campaign2_success\": true }' DELETE example data from clv prediction table curl -X 'DELETE' \\ 'http://127.0.0.1:8000/clv/2' \\ -H 'accept: application/json'","title":"API"},{"location":"API/#fastapi-routes-documentation","text":"","title":"FastAPI Routes Documentation"},{"location":"API/#overview","text":"This documentation covers the FastAPI routes used for handling various entities in the internet service provider's database. These entities include transactions, payment methods, customers, and CLV predictions.","title":"Overview"},{"location":"API/#transactions","text":"","title":"Transactions"},{"location":"API/#get-a-transaction","text":"Route : /transaction/{transaction_id} Method : GET Description : Retrieve a transaction by its ID.","title":"Get a Transaction"},{"location":"API/#create-a-transaction","text":"Route : /transaction/ Method : POST Description : Create a new transaction.","title":"Create a Transaction"},{"location":"API/#update-a-transaction","text":"Route : /transaction/{transaction_id} Method : PUT Description : Update an existing transaction.","title":"Update a Transaction"},{"location":"API/#delete-a-transaction","text":"Route : /transaction/{transaction_id} Method : DELETE Description : Delete a transaction.","title":"Delete a Transaction"},{"location":"API/#payment-methods","text":"","title":"Payment Methods"},{"location":"API/#get-a-payment-method","text":"Route : /payment_method/{payment_method_id} Method : GET Description : Retrieve a payment method by its ID.","title":"Get a Payment Method"},{"location":"API/#create-a-payment-method","text":"Route : /payment_method/ Method : POST Description : Create a new payment method.","title":"Create a Payment Method"},{"location":"API/#update-a-payment-method","text":"Route : /payment_method/{payment_method_id} Method : PUT Description : Update an existing payment method.","title":"Update a Payment Method"},{"location":"API/#delete-a-payment-method","text":"Route : /payment_method/{payment_method_id} Method : DELETE Description : Delete a payment method.","title":"Delete a Payment Method"},{"location":"API/#customers","text":"","title":"Customers"},{"location":"API/#get-a-customer","text":"Route : /customer/{customer_id} Method : GET Description : Retrieve a customer by their ID.","title":"Get a Customer"},{"location":"API/#create-a-customer","text":"Route : /customer/ Method : POST Description : Create a new customer.","title":"Create a Customer"},{"location":"API/#update-a-customer","text":"Route : /customer/{customer_id} Method : PUT Description : Update an existing customer.","title":"Update a Customer"},{"location":"API/#delete-a-customer","text":"Route : /customer/{customer_id} Method : DELETE Description : Delete a customer.","title":"Delete a Customer"},{"location":"API/#clv-predictions","text":"","title":"CLV Predictions"},{"location":"API/#get-a-clv-prediction","text":"Route : /clv/{prediction_id} Method : GET Description : Retrieve a CLV prediction by its ID.","title":"Get a CLV Prediction"},{"location":"API/#create-a-clv-prediction","text":"Route : /clv/ Method : POST Description : Create a new CLV prediction.","title":"Create a CLV Prediction"},{"location":"API/#update-a-clv-prediction","text":"Route : /clv/{prediction_id} Method : PUT Description : Update an existing CLV prediction.","title":"Update a CLV Prediction"},{"location":"API/#delete-a-clv-prediction","text":"Route : /clv/{prediction_id} Method : DELETE Description : Delete a CLV prediction.","title":"Delete a CLV Prediction"},{"location":"API/#readdb-session-model-condition","text":"Reads an object from the database using a condition.","title":"read(db: Session, model, condition)"},{"location":"API/#parameters","text":"db (Session): The database session. model : The model class to query. condition : The condition to filter by.","title":"Parameters:"},{"location":"API/#returns","text":"The first object that matches the condition or None if not found.","title":"Returns:"},{"location":"API/#additional-functions","text":"","title":"Additional Functions"},{"location":"API/#createdb-session-model-obj_data-dict","text":"Creates a new object in the database.","title":"create(db: Session, model, obj_data: dict)"},{"location":"API/#parameters_1","text":"db (Session): The database session. model : The model class to create. obj_data (dict): The data to create the new object with.","title":"Parameters:"},{"location":"API/#returns_1","text":"The newly created object.","title":"Returns:"},{"location":"API/#updatedb-session-model-condition-obj_data-dict","text":"Updates an object in the database that matches a condition.","title":"update(db: Session, model, condition, obj_data: dict)"},{"location":"API/#parameters_2","text":"db (Session): The database session. model : The model class to update. condition : The condition to filter by. obj_data (dict): The data to update the object with.","title":"Parameters:"},{"location":"API/#returns_2","text":"The updated object or None if not found.","title":"Returns:"},{"location":"API/#deletedb-session-model-condition","text":"Deletes an object from the database that matches a condition.","title":"delete(db: Session, model, condition)"},{"location":"API/#parameters_3","text":"db (Session): The database session. model : The model class to delete from. condition : The condition to filter by.","title":"Parameters:"},{"location":"API/#returns_3","text":"True if the object was deleted, False otherwise.","title":"Returns:"},{"location":"API/#example-http-requests","text":"","title":"Example HTTP Requests"},{"location":"API/#get-example-of-clv-prediction-table","text":"curl -X 'GET' \\ 'http://127.0.0.1:8000/clv/2' \\ -H 'accept: application/json' \\ -H 'Content-Type: application/json'","title":"GET example of clv prediction table"},{"location":"API/#post-example-of-clv-prediction-table","text":"curl -X 'POST' \\ 'http://127.0.0.1:8000/clv/' \\ -H 'accept: application/json' \\ -H 'Content-Type: application/json' \\ -d '{ \"prediction_id\": 9999, \"customer_id\": 1, \"clv\" :200, \"predicted_customer_type\": \"Lost Cause\", \"is_campaign1_success\": true, \"is_campaign2_success\": true } '","title":"POST example of clv prediction table"},{"location":"API/#put-example-of-clv-prediction-table","text":"curl -X 'PUT' \\ 'http://127.0.0.1:8000/clv/10' \\ -H 'accept: application/json' \\ -H 'Content-Type: application/json' \\ -d '{ \"clv\" :200, \"predicted_customer_type\": \"Vulnerable Customer\", \"is_campaign1_success\": true, \"is_campaign2_success\": true }'","title":"PUT example of clv prediction table"},{"location":"API/#delete-example-data-from-clv-prediction-table","text":"curl -X 'DELETE' \\ 'http://127.0.0.1:8000/clv/2' \\ -H 'accept: application/json'","title":"DELETE example data from clv prediction table"},{"location":"database_setup/","text":"Internet Service Provider Database Documentation Overview This module is designed for managing and interacting with a database for an internet service provider. It includes a logging setup for tracking operations and a series of SQLAlchemy ORM classes for database interactions. Database Models Dim_Payment_Method A dimension table for storing different payment methods. payment_method_id (Integer, Primary Key): Unique identifier for the payment method. payment_method_name (String): Descriptive name of the payment method. Dim_Customer A dimension table for storing customer details. customer_id (Integer, Primary Key): Unique identifier for the customer. age (Integer): Age of the customer. gender (String): Gender of the customer. first_transaction_date (DateTime): Date of the first transaction. last_transaction_date (DateTime): Date of the last transaction. survival_time (Integer): Duration between the first and last transaction. event_observed (Boolean): Indicates if an event (e.g., churn) is observed. Fact_Transacation A fact table for storing transactions. transaction_id (Integer, Primary Key): Unique identifier for the transaction. customer_id (Integer, ForeignKey): Links to the customer in Dim_Customer . payment_method_id (Integer, ForeignKey): Links to the payment method in Dim_Payment_Method . transaction_date (DateTime): Date and time of the transaction. amount (Float): Monetary value of the transaction. Relationships with Dim_Customer and Dim_Payment_Method . CLV_Prediction A table for storing customer lifetime value predictions. prediction_id (Integer, Primary Key, Auto-increment): Unique identifier for each prediction. customer_id (Integer, ForeignKey): Links to the customer in Dim_Customer . clv (Float): Predicted Customer Lifetime Value. predicted_customer_type (String): Type of customer. is_campaign1_success (Boolean): Success of the first campaign. is_campaign2_success (Boolean): Success of the second campaign. Here is database schema Database Initialization To create all tables in the database, run: import runpy runpy.run_module(\"clv.db.schema\") This will use the engine configuration to create tables as per the defined models.","title":"Database Setup"},{"location":"database_setup/#internet-service-provider-database-documentation","text":"","title":"Internet Service Provider Database Documentation"},{"location":"database_setup/#overview","text":"This module is designed for managing and interacting with a database for an internet service provider. It includes a logging setup for tracking operations and a series of SQLAlchemy ORM classes for database interactions.","title":"Overview"},{"location":"database_setup/#database-models","text":"","title":"Database Models"},{"location":"database_setup/#dim_payment_method","text":"A dimension table for storing different payment methods. payment_method_id (Integer, Primary Key): Unique identifier for the payment method. payment_method_name (String): Descriptive name of the payment method.","title":"Dim_Payment_Method"},{"location":"database_setup/#dim_customer","text":"A dimension table for storing customer details. customer_id (Integer, Primary Key): Unique identifier for the customer. age (Integer): Age of the customer. gender (String): Gender of the customer. first_transaction_date (DateTime): Date of the first transaction. last_transaction_date (DateTime): Date of the last transaction. survival_time (Integer): Duration between the first and last transaction. event_observed (Boolean): Indicates if an event (e.g., churn) is observed.","title":"Dim_Customer"},{"location":"database_setup/#fact_transacation","text":"A fact table for storing transactions. transaction_id (Integer, Primary Key): Unique identifier for the transaction. customer_id (Integer, ForeignKey): Links to the customer in Dim_Customer . payment_method_id (Integer, ForeignKey): Links to the payment method in Dim_Payment_Method . transaction_date (DateTime): Date and time of the transaction. amount (Float): Monetary value of the transaction. Relationships with Dim_Customer and Dim_Payment_Method .","title":"Fact_Transacation"},{"location":"database_setup/#clv_prediction","text":"A table for storing customer lifetime value predictions. prediction_id (Integer, Primary Key, Auto-increment): Unique identifier for each prediction. customer_id (Integer, ForeignKey): Links to the customer in Dim_Customer . clv (Float): Predicted Customer Lifetime Value. predicted_customer_type (String): Type of customer. is_campaign1_success (Boolean): Success of the first campaign. is_campaign2_success (Boolean): Success of the second campaign.","title":"CLV_Prediction"},{"location":"database_setup/#here-is-database-schema","text":"","title":"Here is database schema"},{"location":"database_setup/#database-initialization","text":"To create all tables in the database, run: import runpy runpy.run_module(\"clv.db.schema\") This will use the engine configuration to create tables as per the defined models.","title":"Database Initialization"},{"location":"loading_data/","text":"SqlHandler Class Documentation Overview The SqlHandler class is designed to handle common SQL operations on a database. It provides methods for various database operations such as inserting data, retrieving table columns, truncating tables, and more. Class Attributes: dbname (str): The name of the database. table_name (str): The name of the table to perform operations on. Methods __init__(self, dbname: str, table_name: str) -> None Initializes the SqlHandler object with a database name and table name. Parameters: dbname (str): The name of the database to connect to. table_name (str): The name of the table to perform operations on. close_cnxn(self) -> None Closes the connection to the database. insert_one(self, values: dict) -> str Inserts a single row into the table. Parameters: values (dict): A dictionary containing the column names and their respective values. Returns: A message indicating the success of the insertion. get_table_columns(self) -> list Retrieves a list of column names from the table in the database. Returns: A list of column names from the table. truncate_table(self) -> None Removes all data from the table by dropping it and creating a new one. drop_table(self) Drops the table from the database. insert_many(self, df: pd.DataFrame) -> str Inserts multiple rows into the table from a Pandas DataFrame. Parameters: df (pd.DataFrame): The DataFrame containing the data to insert. Returns: A message indicating the success or failure of the operation. from_sql_to_pandas(self, chunksize: int, id_value: str) -> pd.DataFrame Retrieves data from the table in chunks and returns it as a Pandas DataFrame. Parameters: chunksize (int): The size of each data chunk to retrieve. id_value (str): The ID value to order the data by. Returns: A DataFrame containing the retrieved data. update_table(self, condition) Updates the table based on the specified condition. Parameters: condition : The condition for updating the table. select_row(self, column_name: str, value) -> tuple Selects a row from the table based on a specific column name and value. Parameters: column_name (str): The name of the column to filter on. value : The value to filter rows by in the specified column. Returns: A tuple containing the selected row. get_table_data(self, columns: list = None, condition: str = None) -> pd.DataFrame Retrieves data from the table based on specified columns and an optional condition. Parameters: columns (list): A list of column names to retrieve. condition (str): An optional SQL condition to filter the data. Returns: A DataFrame containing the retrieved data.","title":"Loading the Data"},{"location":"loading_data/#sqlhandler-class-documentation","text":"","title":"SqlHandler Class Documentation"},{"location":"loading_data/#overview","text":"The SqlHandler class is designed to handle common SQL operations on a database. It provides methods for various database operations such as inserting data, retrieving table columns, truncating tables, and more.","title":"Overview"},{"location":"loading_data/#class-attributes","text":"dbname (str): The name of the database. table_name (str): The name of the table to perform operations on.","title":"Class Attributes:"},{"location":"loading_data/#methods","text":"","title":"Methods"},{"location":"loading_data/#__init__self-dbname-str-table_name-str-none","text":"Initializes the SqlHandler object with a database name and table name.","title":"__init__(self, dbname: str, table_name: str) -&gt; None"},{"location":"loading_data/#parameters","text":"dbname (str): The name of the database to connect to. table_name (str): The name of the table to perform operations on.","title":"Parameters:"},{"location":"loading_data/#close_cnxnself-none","text":"Closes the connection to the database.","title":"close_cnxn(self) -&gt; None"},{"location":"loading_data/#insert_oneself-values-dict-str","text":"Inserts a single row into the table.","title":"insert_one(self, values: dict) -&gt; str"},{"location":"loading_data/#parameters_1","text":"values (dict): A dictionary containing the column names and their respective values.","title":"Parameters:"},{"location":"loading_data/#returns","text":"A message indicating the success of the insertion.","title":"Returns:"},{"location":"loading_data/#get_table_columnsself-list","text":"Retrieves a list of column names from the table in the database.","title":"get_table_columns(self) -&gt; list"},{"location":"loading_data/#returns_1","text":"A list of column names from the table.","title":"Returns:"},{"location":"loading_data/#truncate_tableself-none","text":"Removes all data from the table by dropping it and creating a new one.","title":"truncate_table(self) -&gt; None"},{"location":"loading_data/#drop_tableself","text":"Drops the table from the database.","title":"drop_table(self)"},{"location":"loading_data/#insert_manyself-df-pddataframe-str","text":"Inserts multiple rows into the table from a Pandas DataFrame.","title":"insert_many(self, df: pd.DataFrame) -&gt; str"},{"location":"loading_data/#parameters_2","text":"df (pd.DataFrame): The DataFrame containing the data to insert.","title":"Parameters:"},{"location":"loading_data/#returns_2","text":"A message indicating the success or failure of the operation.","title":"Returns:"},{"location":"loading_data/#from_sql_to_pandasself-chunksize-int-id_value-str-pddataframe","text":"Retrieves data from the table in chunks and returns it as a Pandas DataFrame.","title":"from_sql_to_pandas(self, chunksize: int, id_value: str) -&gt; pd.DataFrame"},{"location":"loading_data/#parameters_3","text":"chunksize (int): The size of each data chunk to retrieve. id_value (str): The ID value to order the data by.","title":"Parameters:"},{"location":"loading_data/#returns_3","text":"A DataFrame containing the retrieved data.","title":"Returns:"},{"location":"loading_data/#update_tableself-condition","text":"Updates the table based on the specified condition.","title":"update_table(self, condition)"},{"location":"loading_data/#parameters_4","text":"condition : The condition for updating the table.","title":"Parameters:"},{"location":"loading_data/#select_rowself-column_name-str-value-tuple","text":"Selects a row from the table based on a specific column name and value.","title":"select_row(self, column_name: str, value) -&gt; tuple"},{"location":"loading_data/#parameters_5","text":"column_name (str): The name of the column to filter on. value : The value to filter rows by in the specified column.","title":"Parameters:"},{"location":"loading_data/#returns_4","text":"A tuple containing the selected row.","title":"Returns:"},{"location":"loading_data/#get_table_dataself-columns-list-none-condition-str-none-pddataframe","text":"Retrieves data from the table based on specified columns and an optional condition.","title":"get_table_data(self, columns: list = None, condition: str = None) -&gt; pd.DataFrame"},{"location":"loading_data/#parameters_6","text":"columns (list): A list of column names to retrieve. condition (str): An optional SQL condition to filter the data.","title":"Parameters:"},{"location":"loading_data/#returns_5","text":"A DataFrame containing the retrieved data.","title":"Returns:"},{"location":"logger/","text":"CustomFormatter Class Documentation Overview The CustomFormatter class in the provided script extends the logging.Formatter class to create a custom formatter for informative logging. This formatter adds color to log messages based on their severity level. Class Details Class CustomFormatter(logging.Formatter) A custom logging formatter that adds color to log messages. Attributes grey : Grey color code for DEBUG level messages. violet : Violet color code for INFO level messages. yellow : Yellow color code for WARNING level messages. red : Red color code for ERROR level messages. bold_red : Bold red color code for CRITICAL level messages. reset : Reset color code. format : String format for log messages. FORMATS : Dictionary mapping logging levels to their respective color formats. Method format(self, record) Formats the log record with color based on the severity level. Parameters: record : The log record. Returns: Formatted (colored) log message. Example Usage The following example demonstrates how to use the CustomFormatter class: import logging import os logger = logging.getLogger(os.path.basename(__file__)) logger.setLevel(logging.DEBUG) ch = logging.StreamHandler() ch.setLevel(logging.DEBUG) ch.setFormatter(CustomFormatter()) logger.addHandler(ch) logger.debug(\"debug message\") logger.info(\"Warning: Email has not been sent......\") logger.warning(\"warning message\") logger.error(\"error message\") logger.critical(\"critical message\") This example sets up a logger with the custom formatter and logs messages of various severity levels.","title":"Logger"},{"location":"logger/#customformatter-class-documentation","text":"","title":"CustomFormatter Class Documentation"},{"location":"logger/#overview","text":"The CustomFormatter class in the provided script extends the logging.Formatter class to create a custom formatter for informative logging. This formatter adds color to log messages based on their severity level.","title":"Overview"},{"location":"logger/#class-details","text":"","title":"Class Details"},{"location":"logger/#class-customformatterloggingformatter","text":"A custom logging formatter that adds color to log messages.","title":"Class CustomFormatter(logging.Formatter)"},{"location":"logger/#attributes","text":"grey : Grey color code for DEBUG level messages. violet : Violet color code for INFO level messages. yellow : Yellow color code for WARNING level messages. red : Red color code for ERROR level messages. bold_red : Bold red color code for CRITICAL level messages. reset : Reset color code. format : String format for log messages. FORMATS : Dictionary mapping logging levels to their respective color formats.","title":"Attributes"},{"location":"logger/#method-formatself-record","text":"Formats the log record with color based on the severity level.","title":"Method format(self, record)"},{"location":"logger/#parameters","text":"record : The log record.","title":"Parameters:"},{"location":"logger/#returns","text":"Formatted (colored) log message.","title":"Returns:"},{"location":"logger/#example-usage","text":"The following example demonstrates how to use the CustomFormatter class: import logging import os logger = logging.getLogger(os.path.basename(__file__)) logger.setLevel(logging.DEBUG) ch = logging.StreamHandler() ch.setLevel(logging.DEBUG) ch.setFormatter(CustomFormatter()) logger.addHandler(ch) logger.debug(\"debug message\") logger.info(\"Warning: Email has not been sent......\") logger.warning(\"warning message\") logger.error(\"error message\") logger.critical(\"critical message\") This example sets up a logger with the custom formatter and logs messages of various severity levels.","title":"Example Usage"},{"location":"model/","text":"Model Module Documentation Overview This page documents the model module which is part of an internet service provider's data analysis system. It includes functionality for connecting to a database, retrieving data, and calculating the Customer Lifetime Value (CLV). Data Preparation The transaction data is retrieved and processed: - transaction_date is converted to a datetime format. - survival_time_months is calculated for the customer data. Functions MM() Calculates the average monthly margin based on the last year's transaction data. Returns : - float : Average monthly margin. p() Calculates the survival probabilities for customers using the LogNormal AFT estimator for a year. Returns : - DataFrame : Survival probabilities for each customer up to 12 months. CLV Class This class is used to calculate the Customer Lifetime Value for a given customer. Method: calculate_clv() Calculates CLV based on survival probabilities and average monthly margins. Parameters : - t (int): Time for which CLV is calculated. - customer_id (int): Identifier for the customer. Returns : - float : Calculated CLV rounded to three decimal places.","title":"Model"},{"location":"model/#model-module-documentation","text":"","title":"Model Module Documentation"},{"location":"model/#overview","text":"This page documents the model module which is part of an internet service provider's data analysis system. It includes functionality for connecting to a database, retrieving data, and calculating the Customer Lifetime Value (CLV).","title":"Overview"},{"location":"model/#data-preparation","text":"The transaction data is retrieved and processed: - transaction_date is converted to a datetime format. - survival_time_months is calculated for the customer data.","title":"Data Preparation"},{"location":"model/#functions","text":"","title":"Functions"},{"location":"model/#mm","text":"Calculates the average monthly margin based on the last year's transaction data. Returns : - float : Average monthly margin.","title":"MM()"},{"location":"model/#p","text":"Calculates the survival probabilities for customers using the LogNormal AFT estimator for a year. Returns : - DataFrame : Survival probabilities for each customer up to 12 months.","title":"p()"},{"location":"model/#clv-class","text":"This class is used to calculate the Customer Lifetime Value for a given customer.","title":"CLV Class"},{"location":"model/#method-calculate_clv","text":"Calculates CLV based on survival probabilities and average monthly margins. Parameters : - t (int): Time for which CLV is calculated. - customer_id (int): Identifier for the customer. Returns : - float : Calculated CLV rounded to three decimal places.","title":"Method: calculate_clv()"}]}